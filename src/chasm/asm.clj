(ns chasm.asm
  (:require [clojure.java.io :as io]))

(def registers
  "https://www3.nd.edu/~dthain/courses/cse40243/fall2015/intel-intro.html
  X86-64 has sixteen (almost) general purpose 64-bit integer registers"
  [:%rax :%rbx :%rcx :%rdx :%rsi :%rdi :%rbp :%rsp :%r8 :%r9 :%r10 :%r11 :%r12 :%r13 :%r14 :%r15])

(def opcode-table
  ;; mne opc op  des
  [])

;; which opcodes/mnemonics do we support?

;; [pushq :%rbp]

(def e-ident
  [:ei-magic      (mapv byte "ELF")   ; magic number
   :ei-class      [2]                   ; 64 bit
   :ei-data       [1]                   ; little endian
   :ei-version    [1]                   ; original elf
   :ei-osabi      [1]                   ; system-v
   :ei-abiversion [0]                   ; undefined
   :ei-pad        [0 0 0 0 0 0 0]])     ; padding

(def e-type [2 0])          ; executable

(def e-machine [0x3E 0])                ; x86-64
(def e-version [1 0 0 0])               ; original
(def e-entry   [0xE8 0 0x40 0 0 0 0 0]) ; arbitrary? entry point location
(def e-phoff   [0x40 0 0 0 0 0 0 0])    ; program header offset (set per arch)
(def e-shoff   [0x60 0x02 0 0 0 0 0 0]) ; section header offset (arbitrary)
(def e-flags   [0 0 0 0])               ; EF_machine_flag CPU flags
(def e-ehsize  [0x40 0])                ; size of this header (64 bytes)

(def e-phentsize [0x38 0]) ; program header table entry size
(def e-phnum     [0x03 0]) ; number of entries in ^^
(def e-shentsize [0x40 0]) ; section header table entry size
(def e-shnum     [0x06 0]) ; number of entries in ^^
(def e-shstrndx  [0x03 0]) ; index of the section header table entry that contains the section names

(def file-header
  (->> (concat (->> e-ident (partition 2) (mapcat second))
               e-type
               e-machine
               e-version
               e-entry
               e-phoff
               e-shoff
               e-flags
               e-ehsize
               e-phentsize
               e-phnum
               e-shentsize
               e-shnum
               e-shstrndx
               )
       (byte-array)))

(def ph-entry-1 ; size 56
  (let [p-type   [0x01 0    0    0]
        p-flags  [0x05 0    0    0]
        p-offset [0    0    0    0 0 0 0 0]
        p-vaddr  [0    0    0x40 0 0 0 0 0]
        p-paddr  [0    0    0x40 0 0 0 0 0]
        p-filesz [0x0a 0x01 0    0 0 0 0 0]
        p-memsz  [0x0a 0x01 0    0 0 0 0 0]
        p-align  [0    0    0x20 0 0 0 0 0]]
    (concat p-type p-flags p-offset p-vaddr p-paddr p-filesz p-memsz p-align)))


(def ph-entry-2
  (let [p-type   [0x01 0 0       0]
        p-flags  [0x06 0 0       0]
        p-offset [0x0a 0x01 0    0 0 0 0 0]
        p-vaddr  [0x0a 0x01 0x60 0 0 0 0 0]
        p-paddr  [0x0a 0x01 0x60 0 0 0 0 0]
        p-filesz [0x0e 0    0    0 0 0 0 0]
        p-memsz  [0x0e 0    0    0 0 0 0 0]
        p-align  [0    0    0x20 0 0 0 0 0]]
    (concat p-type p-flags p-offset p-vaddr p-paddr p-filesz p-memsz p-align)))

(def ph-entry-3
  (let [p-type   [0x80 0x15 0x04 0x65]
        p-flags  [0x00 0x28 0x00 0x00]
        p-offset [0x00 0x00 0    0    0 0 0 0]
        p-vaddr  [0x00 0x00 0x00 0    0 0 0 0]
        p-paddr  [0x00 0x00 0x00 0    0 0 0 0]
        p-filesz [0x00 0    0    0    0 0 0 0]
        p-memsz  [0x00 0    0    0    0 0 0 0]
        p-align  [0x08 0    0x00 0    0 0 0 0]]
    (concat p-type p-flags p-offset p-vaddr p-paddr p-filesz p-memsz p-align)))

(def program-header
  (byte-array
   (concat ph-entry-1 ph-entry-2 ph-entry-3)))


(def segment-1 ; exectutable
  [0xba 0x0e  0x00 0x00  0x00 0xb9  0x0a 0x01
   0x60 0x00  0xbb 0x01  0x00 0x00  0x00 0xb8
   0x04 0x00  0x00 0x00  0xcd 0x80  0xbb 0x00
   0x00 0x00  0x00 0xb8  0x01 0x00  0x00 0x00
   0xcd 0x80])

(def segment-2 ; Hello, world!\n
  [0x48 0x65  0x6c 0x6c  0x6f 0x2c  0x20 0x77
   0x6f 0x72  0x6c 0x64  0x21 0x0a])


(def string-table-4
  [0x00 0x2e 0x73 0x79 0x6d 0x74 0x61 0x62
   0x00 0x2e 0x73 0x74 0x72 0x74 0x61 0x62
   0x00 0x2e 0x73 0x68 0x73 0x74 0x72 0x74
   0x61 0x62 0x00 0x2e 0x74 0x65 0x78 0x74
   0x00 0x2e 0x64 0x61 0x74 0x61 0x00 0x00])

(def symbol-table-5
  [0x00 0x00  0x00 0x00  0x00 0x00  0x00 0x00
   0x00 0x00  0x00 0x00  0x00 0x00  0x00 0x00
   0x00 0x00  0x00 0x00  0x00 0x00  0x00 0x00
   0x00 0x00  0x00 0x00  0x03 0x00  0x01 0x00
   0xe8 0x00  0x40 0x00  0x00 0x00  0x00 0x00
   0x00 0x00  0x00 0x00  0x00 0x00  0x00 0x00
   0x00 0x00  0x00 0x00  0x03 0x00  0x02 0x00
   0x0a 0x01  0x60 0x00  0x00 0x00  0x00 0x00
   0x00 0x00  0x00 0x00  0x00 0x00  0x00 0x00
   0x01 0x00  0x00 0x00  0x04 0x00  0xf1 0xff
   0x00 0x00  0x00 0x00  0x00 0x00  0x00 0x00
   0x00 0x00  0x00 0x00  0x00 0x00  0x00 0x00
   0x10 0x00  0x00 0x00  0x00 0x00  0xf1 0xff
   0x0e 0x00  0x00 0x00  0x00 0x00  0x00 0x00
   0x00 0x00  0x00 0x00  0x00 0x00  0x00 0x00
   0x14 0x00  0x00 0x00  0x00 0x00  0x02 0x00
   0x0a 0x01  0x60 0x00  0x00 0x00  0x00 0x00
   0x00 0x00  0x00 0x00  0x00 0x00  0x00 0x00
   0x1d 0x00  0x00 0x00  0x10 0x00  0x01 0x00
   0xe8 0x00  0x40 0x00  0x00 0x00  0x00 0x00
   0x00 0x00  0x00 0x00  0x00 0x00  0x00 0x00
   0x18 0x00  0x00 0x00  0x10 0x00  0x02 0x00
   0x18 0x01  0x60 0x00  0x00 0x00  0x00 0x00
   0x00 0x00  0x00 0x00  0x00 0x00  0x00 0x00
   0x24 0x00  0x00 0x00  0x10 0x00  0x02 0x00
   0x18 0x01  0x60 0x00  0x00 0x00  0x00 0x00
   0x00 0x00  0x00 0x00  0x00 0x00  0x00 0x00
   0x2b 0x00  0x00 0x00  0x10 0x00  0x02 0x00
   0x18 0x01  0x60 0x00  0x00 0x00  0x00 0x00
   0x00 0x00  0x00 0x00  0x00 0x00  0x00 0x00])

(def string-table-6
  [0x00 0x74  0x61 0x72  0x67 0x65  0x74 0x2f
   0x68 0x65  0x6c 0x6c  0x6f 0x2e  0x6f 0x00
   0x6c 0x65  0x6e 0x00  0x6d 0x73  0x67 0x00
   0x5f 0x5f  0x62 0x73  0x73 0x5f  0x73 0x74
   0x61 0x72  0x74 0x00  0x5f 0x65  0x64 0x61
   0x74 0x61  0x00 0x5f  0x65 0x6e  0x64 0x00])

(def sections
  (byte-array
   (concat segment-1 segment-2 symbol-table-5 string-table-6 string-table-4)))

;;; 0x0208 => 520 = string table start

(def section-header-1
  (let [sh-name      [0 0 0 0]
        sh-type      [0 0 0 0]
        sh-flags     [0 0 0 0 0 0 0 0]
        sh-addr      [0 0 0 0 0 0 0 0]
        sh-offset    [0 0 0 0 0 0 0 0]
        sh-size      [0 0 0 0 0 0 0 0]
        sh-link      [0 0 0 0]
        sh-info      [0 0 0 0]
        sh-addralign [0 0 0 0 0 0 0 0]
        sh-entsize   [0 0 0 0 0 0 0 0]]
    (byte-array
     (concat sh-name sh-type sh-flags sh-addr sh-offset
             sh-size sh-link sh-info sh-addralign sh-entsize))))

(def section-header-2 ; segment-1
  (let [sh-name      [0x1b 0 0    0] ; name at 1b in shstrtab
        sh-type      [0x01 0 0    0] ; program data
        sh-flags     [0x06 0 0    0 0 0 0 0] ; alloc/execinst?
        sh-addr      [0xe8 0 0x40 0 0 0 0 0]
        sh-offset    [0xe8 0 0    0 0 0 0 0] ; offset of section in file image
        sh-size      [0x22 0 0    0 0 0 0 0] ; size in file image
        sh-link      [0    0 0    0]
        sh-info      [0    0 0    0]
        sh-addralign [0x01 0 0    0 0 0 0 0]
        sh-entsize   [0    0 0    0 0 0 0 0]]
    (byte-array
     (concat sh-name sh-type sh-flags sh-addr sh-offset
             sh-size sh-link sh-info sh-addralign sh-entsize))))

(def section-header-3 ; segment-2 Hello, world!\n
  (let [sh-name      [0x21 0    0    0]
        sh-type      [0x01 0    0    0] ; program data
        sh-flags     [0x03 0    0    0 0 0 0 0] ; write/alloc?
        sh-addr      [0x0a 0x01 0x60 0 0 0 0 0]
        sh-offset    [0x0a 0x01 0    0 0 0 0 0]
        sh-size      [0x0e 0    0    0 0 0 0 0]
        sh-link      [0    0    0    0]
        sh-info      [0    0    0    0]
        sh-addralign [0x01 0    0    0 0 0 0 0]
        sh-entsize   [0    0    0    0 0 0 0 0]]
    (byte-array
     (concat sh-name sh-type sh-flags sh-addr sh-offset
             sh-size sh-link sh-info sh-addralign sh-entsize))))

(def section-header-4
  (let [sh-name      [0x11 0x00 0x00 0x00]
        sh-type      [0x03 0x00 0x00 0x00] ; string table 4
        sh-flags     [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
        sh-addr      [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
        sh-offset    [0x38 0x02 0x00 0x00 0x00 0x00 0x00 0x00]
        sh-size      [0x27 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
        sh-link      [0x00 0x00 0x00 0x00]
        sh-info      [0x00 0x00 0x00 0x00]
        sh-addralign [0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
        sh-entsize   [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]]
    (byte-array
     (concat sh-name sh-type sh-flags sh-addr sh-offset
             sh-size sh-link sh-info sh-addralign sh-entsize))))

(def section-header-5
  (let [sh-name      [0x01 0x00 0x00 0x00]
        sh-type      [0x02 0x00 0x00 0x00] ; symbol table
        sh-flags     [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
        sh-addr      [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
        sh-offset    [0x18 0x01 0x00 0x00 0x00 0x00 0x00 0x00]
        sh-size      [0xf0 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
        sh-link      [0x05 0x00 0x00 0x00]
        sh-info      [0x06 0x00 0x00 0x00]
        sh-addralign [0x08 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
        sh-entsize   [0x18 0x00 0x00 0x00 0x00 0x00 0x00 0x00]]
    (byte-array
     (concat sh-name sh-type sh-flags sh-addr sh-offset
             sh-size sh-link sh-info sh-addralign sh-entsize))))

(def section-header-6
  (let [sh-name      [0x09 0x00 0x00 0x00]
        sh-type      [0x03 0x00 0x00 0x00] ; string table 6
        sh-flags     [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
        sh-addr      [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
        sh-offset    [0x08 0x02 0x00 0x00 0x00 0x00 0x00 0x00]
        sh-size      [0x30 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
        sh-link      [0x00 0x00 0x00 0x00]
        sh-info      [0x00 0x00 0x00 0x00]
        sh-addralign [0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
        sh-entsize   [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]]
    (byte-array
     (concat sh-name sh-type sh-flags sh-addr sh-offset
             sh-size sh-link sh-info sh-addralign sh-entsize))))

;;; 0x0260 => 608 = section header start
(def section-header
  (byte-array
   (concat section-header-1
           section-header-2
           section-header-3
           section-header-4
           section-header-5
           section-header-6)))

(defn write []
  (let [f (io/file "target/elf")]
    (with-open [s (java.io.FileOutputStream. f)]
      (.write s file-header)
      (.write s program-header)
      (.write s sections)
      (.write s section-header))
    (.setExecutable f true true)))

(write)
